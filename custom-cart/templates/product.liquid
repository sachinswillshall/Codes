
<!-- /templates/product.liquid -->
{% layout 'theme-condensed' %}

{% comment %}

  If the product has variants, splits the selection into a 2 step process
  Passing the query param `selectVariant=true` will skip to the 2nd step

{% endcomment %}



{% if product.type == 'Box' %}
  {% assign is_box = true %}
{% else %}
  {% assign is_box = false %}
{% endif %}


{% comment %}{% include 'bread-crumb-shop' with product %}{% endcomment %}

<div data-step-1 class="select-product">
  {% comment %}

    Rich snippets (itemscope, itemtype, etc.) for products are a theme requirement,
    and allow search engines to easily understand what the content is.

    For more information on these Scheme.org tags, visit:
      - http://schema.org/docs/gs.html

  {% endcomment %}
  <div itemscope itemtype="http://schema.org/Product">

    <meta itemprop="url" content="{{ {{
shop.url }}{{ product.url }}">
    <meta itemprop="image" content="{{ product.featured_image.src | img_url: 'grande' }}">

    {% comment %}
      Get first variant, or deep linked one
    {% endcomment %}
    {% assign current_variant = product.selected_or_first_available_variant %}

    <div class="grid product-single">
      <div class="grid__item large--one-half text-center">
        <div class="product-single__photos" id="ProductPhoto">
          {% assign featured_image = current_variant.featured_image | default: product.featured_image %}
          <img src="{{ featured_image | img_url: 'large' }}" alt="{{ featured_image.alt | escape }}" id="ProductPhotoImg">
        </div>

        {% comment %}
          Create thumbnails if we have more than one product image
        {% endcomment %}
        {% if product.images.size > 1 %}
          <ul class="product-single__thumbnails grid-uniform" id="ProductThumbs">

            {% for image in product.images %}
              <li class="grid__item one-quarter">
                <a href="{{ image.src | img_url: 'large' }}" class="product-single__thumbnail">
                  <img src="{{ image.src | img_url: 'compact' }}" alt="{{ image.alt | escape }}">
                </a>
              </li>
            {% endfor %}

          </ul>
        {% endif %}
      </div>

      <div class="grid__item large--one-half">
        {% include 'badges' with product %}

        <h1 itemprop="name">{{ product.title}}</h1>

        <div itemprop="offers" itemscope itemtype="http://schema.org/Offer">
          <meta itemprop="priceCurrency" content="{{ shop.currency }}">

          <link itemprop="availability" href="http://schema.org/{% if product.available %}InStock{% else %}OutOfStock{% endif %}">

          <span class="visually-hidden">{{ 'products.general.regular_price' | t }}</span>
          <span id="ProductPrice" class="h2" itemprop="price" content="{{ current_variant.price | divided_by: 100.00 }}">
            {{ current_variant.price | money }}
          </span>

          {% if product.compare_at_price_max > product.price %}
            <span class="visually-hidden">{{ 'products.general.sale_price' | t }}</span>
            <p id="ComparePrice">
              {{ 'products.product.compare_at' | t }} {{ current_variant.compare_at_price | money }}
            </p>
          {% endif %}
          {% comment %}
            Langify requires the description to appear unmodified in the template for translations to work
          {% endcomment %}
          {% capture description %}{{ product.description}}{% endcapture %}
          {% assign product_description_split = description | split: '<h3>' %}
          {% assign product_description = product_description_split.first %}
          {% if product_description_split.size > 1 %}
            {% assign product_contents = product_description_split.last | prepend: '<h3>' %}
          {% endif %}

          <div class="product-description rte" itemprop="description">
            {{ product_description }}
          </div>

          {% if is_box %}


            <form action="/cart/add" method="post" enctype="multipart/form-data" data-add-to-cart-form class="form-vertical">
              <input type="hidden" id="id" name="id" class="box" value="{{product.selected_or_first_available_variant.id}}" >
              <input type="hidden" id="Quantity" name="quantity" value="1" min="1" class="quantity-selector">
              <select name="id" id="productSelect" class="product-single__variants" style="display: none">
                {% for variant in product.variants %}
                  {% if variant.available %}

                    {% comment %}
                      Note: if you use option_selection.js, your `select` tag will be overwritten, meaning what you have inside `option` will not reflect what you coded below.
                    {% endcomment %}
                    <option {% if variant == product.selected_or_first_available_variant %} selected="selected" {% endif %} data-sku="{{ variant.sku }}" value="{{ variant.id }}">
                      {{ variant.title}} - {{ variant.price | money_with_currency }}
                    </option>
                  {% else %}
                    <option disabled="disabled">
                      {{ variant.title}} - {{ 'products.product.sold_out' | t }}
                    </option>
                  {% endif %}
                {% endfor %}

              </select>

              <button type="submit" name="add" data-add-to-cart class="add-to-cart__button--main btn">
                <i class="icon-plus" aria-hidden="true"></i>
                <span>{{ 'products.product.add_to_cart' | t }}</span>
              </button>


              {% comment %}
                Add product variants as a dropdown.
                  - By default, each variant (or combination of variants) will display as its own `option`
                  - To separate these into multiple steps, which we suggest, use option_selection.js (see below)

                You can leverage jQuery to add a callback on page load and each time the select element changes:
                  - Include option_selection.js (as seen at the bottom of this file)
                  - This allows you to use JavaScript anytime the variant dropdown changes
                  - This also separates out your variant options (ie. size, color, etc.) to separate select elements

                For more information on products with multiple options, visit:
                  - http://docs.shopify.com/support/your-website/themes/can-i-make-my-theme-use-products-with-multiple-options#update-product-liquid
              {% endcomment %}

            </form>

          {% else %}
            {% comment %}
              [data-add-to-cart-form] is a selector for the ajax cart plugin
            {% endcomment %}
              <form action="/cart/add" method="post" enctype="multipart/form-data" data-add-to-cart-form class="form-vertical">
                  <input type="hidden" id="Quantity" name="quantity" value="1" min="1" class="quantity-selector">

              {% if product.variants.size > 1 %}

                <select name="id" id="productSelect" class="product-single__variants">
                  {% for variant in product.variants %}
                    {% if variant.available %}

                      {% comment %}
                        Note: if you use option_selection.js, your `select` tag will be overwritten, meaning what you have inside `option` will not reflect what you coded below.
                      {% endcomment %}
                      <option {% if variant == product.selected_or_first_available_variant %} selected="selected" {% endif %} data-sku="{{ variant.sku }}" value="{{ variant.id }}">
                        {{ variant.title}} - {{ variant.price | money_with_currency }}
                      </option>
                    {% else %}
                      <option disabled="disabled">
                        {{ variant.title}} - {{ 'products.product.sold_out' | t }}
                      </option>
                    {% endif %}
                  {% endfor %}

                </select>
              {% else %}

                <input type="hidden" id="id" name="id" value="{{product.selected_or_first_available_variant.id}}" >
              {% endif %}

                       <button type="submit" name="add" data-add-to-cart class="add-to-cart__button--main btn">
                <i class="icon-plus" aria-hidden="true"></i>
                <span>{{ 'products.product.add_to_cart' | t }}</span>
              </button>
              {% comment %}
                Add product variants as a dropdown.
                  - By default, each variant (or combination of variants) will display as its own `option`
                  - To separate these into multiple steps, which we suggest, use option_selection.js (see below)

                You can leverage jQuery to add a callback on page load and each time the select element changes:
                  - Include option_selection.js (as seen at the bottom of this file)
                  - This allows you to use JavaScript anytime the variant dropdown changes
                  - This also separates out your variant options (ie. size, color, etc.) to separate select elements

                For more information on products with multiple options, visit:
                  - http://docs.shopify.com/support/your-website/themes/can-i-make-my-theme-use-products-with-multiple-options#update-product-liquid
              {% endcomment %}


            </form>
          {% endif %}

          {% if product_contents %}
            <div class="product-description rte" itemprop="contents">
              {{ product_contents }}
            </div>
          {% endif %}

        </div>
      </div>
    </div>
  </div>

  <hr>

  {% include 'frontpage-collection' %}
</div>
